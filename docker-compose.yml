version: '2' # Using v2 to be able to use mem_limit & mem_reservation

services:
  website_db:
    image: mysql:5.7      # MariaDB is recommended, although I'm using this one as it's what my dependencies required at the time of creating this repo.
    container_name: website_db_container
    expose:
      - 3306
    ports:
      - "33060:3306"
    environment: 
      MYSQL_DATABASE: website_db
      MYSQL_USER: website_db_user
      MYSQL_ROOT_PASSWORD: website_db_root_password
      MYSQL_PASSWORD: website_db_user_password
    volumes:
      - ./public/website/mysql:/var/lib/mysql       # The shared mysql folder, so the container can be recreated without destroying the databases.
      
    # mem_limit: 2g                   # Limit the resources that can be consumed by the container. Helps servers runnning other services
    # mem_reservation: 2g             # Limit the resources that can be consumed by the container. Helps servers runnning other services
          
    # restart: always               # Not recommended. Can generate a loop where the container seems to be working but it's not.
    # command: tail -f /dev/null    # Keeps the container alive even when something goes wrong. Use to access logs, etc.

  website_wordpress:
    image: wordpress:php7.1
    container_name: website_wordpress_container
    depends_on:
      - website_db
    expose:
      - 80
    environment:
      VIRTUAL_HOST: website_wordpress.com,website_localhost       # List of URLs this wordpress instance will listen to
      WORDPRESS_DB_HOST: website_db_container:3306
      WORDPRESS_DB_NAME: website_db_user
      WORDPRESS_DB_USER: masimpact_user
      WORDPRESS_DB_PASSWORD: website_db_user_password
    build: ./public/website
    command: bash -c 'rm -rf /var/www/html/* && git -C /var/www/html clone https://github.com/WordPress/WordPress.git . || git -C /var/www/html pull origin master'     # Replace master with the relevant branch name
    volumes:
        - ./public/website/www:/var/www/html          # Folder must be empty, otherwise, remove `command`
      
        # mem_limit: 2g                   # Limit the resources that can be consumed by the container. Helps servers runnning other services
        # mem_reservation: 2g             # Limit the resources that can be consumed by the container. Helps servers runnning other services
          
    # restart: always               # Not recommended. Can generate a loop where the container seems to be working but it's not.

  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
          
    # restart: always               # Not recommended. Can generate a loop where the container seems to be working but it's not.



networks:
  default:
    external:
      name: nginx-proxy-network       # Before creating the first instance, you'll need to create the network via command line: `docker network create nginx-proxy-network`


# find . -type f | xargs -I{} chmod 664 {} ;  find . -type d | xargs -I{} chmod 775 {} ;
# find . -type f | xargs -I{} chmod 666 {} ;  find . -type d | xargs -I{} chmod 777 {} ;
